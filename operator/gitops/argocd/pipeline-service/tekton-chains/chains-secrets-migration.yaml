---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: tekton-chains-secrets-migrator
  namespace: openshift-pipelines
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: tekton-chains-secret-migration
rules:
  - apiGroups:
      - ""
    resources:
      - secrets
    resourceNames:
      - public-key
      - signing-secrets
    verbs:
      - get
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: tekton-chains-secrets-migrator
  namespace: tekton-chains
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: tekton-chains-secret-migration
subjects:
  - kind: ServiceAccount
    name: tekton-chains-secrets-migrator
    namespace: openshift-pipelines
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: openshift-pipelines-secret-migration
  namespace: openshift-pipelines
rules:
  - apiGroups:
      - ""
    resources:
      - secrets
    verbs:
      - list
      - create
      - get
      - update
      - patch
      - delete
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: openshift-pipelines-secret-migration
  namespace: openshift-pipelines
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: openshift-pipelines-secret-migration
subjects:
  - kind: ServiceAccount
    name: tekton-chains-secrets-migrator
    namespace: openshift-pipelines
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: openshift-gitops-jobs-admin
rules:
  - apiGroups:
      - batch
    resources:
      - jobs
    verbs:
      - get
      - list
      - patch
      - create
      - delete
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: openshift-gitops-jobs-admin
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: openshift-gitops-jobs-admin
subjects:
  - kind: ServiceAccount
    name: openshift-gitops-argocd-application-controller
    namespace: openshift-gitops
---
apiVersion: batch/v1
kind: Job
metadata:
  name: tekton-chains-secrets-migration
  namespace: openshift-pipelines
  annotations:
    # Must run after tekton-chains-signing-secret during migration
    argocd.argoproj.io/sync-wave: "2"
spec:
  template:
    spec:
      containers:
        - name: chains-secret-migration
          image: quay.io/redhat-appstudio/appstudio-utils:eb94f28fe2d7c182f15e659d0fdb66f87b0b3b6b
          imagePullPolicy: Always
          command:
            - /bin/bash
            - -c
            - |
              cd /tmp
              # Once the key-pair has been set it's marked as immutable so it can't be updated.
              # Try to handle that nicely. The object is expected to always exist so check the data.
              echo "Waiting for tekton-chains/secrets/signing-secrets: "
              while [ -z  $CHAINS_SIG_KEY_DATA ]; do
                echo -n "."
                CHAINS_SIG_KEY_DATA=$(kubectl get secret signing-secrets -n tekton-chains -o jsonpath='{.data}')
                sleep 3
              done
              echo "OK"

              OSP_SIG_KEY_DATA=$(kubectl get secret signing-secrets -n openshift-pipelines -o jsonpath='{.data}')
              if [ -z "$OSP_SIG_KEY_DATA" -o "$OSP_SIG_KEY_DATA" != "$CHAINS_SIG_KEY_DATA" ]; then
                echo "openshift-pipelines: copying signing-secrets from tekton-chains"
                kubectl create secret generic signing-secrets \
                  --namespace openshift-pipelines \
                  --from-literal=cosign.key="$(
                    echo "$CHAINS_SIG_KEY_DATA" | jq -r '.["cosign.key"]' | base64 -d
                  )" \
                  --from-literal=cosign.password="$(
                    echo "$CHAINS_SIG_KEY_DATA" | jq -r '.["cosign.password"]' | base64 -d
                  )" \
                  --from-literal=cosign.pub="$(
                    echo "$CHAINS_SIG_KEY_DATA" | jq -r '.["cosign.pub"]' | base64 -d
                  )" \
                  --dry-run=client \
                  -o yaml | kubectl apply -f -
              else
                echo "openshift-pipelines: signing-secrets is up to date"
              fi

              # Generate/update the secret with the public key
              echo "Creating public-key in openshift-pipelines"
              kubectl create secret generic public-key \
                --namespace openshift-pipelines \
                --from-literal=cosign.pub="$(
                  cosign public-key --key k8s://openshift-pipelines/signing-secrets
                )" \
                --dry-run=client \
                -o yaml | kubectl apply -f -
              echo "OK"
      dnsPolicy: ClusterFirst
      restartPolicy: OnFailure
      terminationGracePeriodSeconds: 30
      serviceAccountName: tekton-chains-secrets-migrator
---
# public-key access
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: openshift-pipelines-public-key-viewer
  namespace: openshift-pipelines
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: tekton-chains-public-key-viewer
subjects:
  - apiGroup: rbac.authorization.k8s.io
    kind: Group
    name: system:authenticated
